// Generated by CoffeeScript 1.9.3
var Promise, YahooJp, api, cheerio, querystring, requestAsync, throat;

Promise = require('bluebird');

throat = require('throat');

requestAsync = Promise.promisify(require('request'));

cheerio = require('cheerio');

querystring = require('querystring');

api = 'http://search.yahoo.co.jp/search';

YahooJp = (function() {
  function YahooJp() {}

  YahooJp.prototype.fetchAll = function(queries, options) {
    var items, j, ref, results;
    if (queries == null) {
      queries = {};
    }
    if (options == null) {
      options = {};
    }
    items = [];
    if (options.limit == null) {
      options.limit = 1;
    }
    if (options.concurrency == null) {
      options.concurrency = 1;
    }
    return Promise.all((function() {
      results = [];
      for (var j = 0, ref = options.limit; 0 <= ref ? j < ref : j > ref; 0 <= ref ? j++ : j--){ results.push(j); }
      return results;
    }).apply(this).map(throat(options.concurrency, (function(_this) {
      return function(i) {
        return _this.fetch(queries, i);
      };
    })(this)))).then(function(pages) {
      var item, j, k, len, len1, page;
      for (j = 0, len = pages.length; j < len; j++) {
        page = pages[j];
        for (k = 0, len1 = page.length; k < len1; k++) {
          item = page[k];
          items.push(item);
        }
      }
      return items;
    });
  };

  YahooJp.prototype.fetch = function(queries, offset, step) {
    var uri;
    if (queries == null) {
      queries = {};
    }
    if (offset == null) {
      offset = 0;
    }
    if (step == null) {
      step = 10;
    }
    if (queries.pstart == null) {
      queries.pstart = 1;
    }
    queries.b = step * offset + 1;
    uri = api + '?' + querystring.stringify(queries);
    return requestAsync(uri).spread(function(response) {
      var $, body, index, j, len, li, node, ref, results, title, url;
      $ = cheerio.load(response.body);
      if ($('#noRes').length) {
        return [];
      }
      ref = $('#web ol li');
      results = [];
      for (index = j = 0, len = ref.length; j < len; index = ++j) {
        node = ref[index];
        li = $(node);
        url = (li.find('a')).eq(0).attr('href');
        title = (li.find('a')).eq(0).text();
        body = (li.find('div')).eq(0).text();
        results.push({
          url: url,
          title: title,
          body: body
        });
      }
      return results;
    });
  };

  return YahooJp;

})();

module.exports = new YahooJp;
